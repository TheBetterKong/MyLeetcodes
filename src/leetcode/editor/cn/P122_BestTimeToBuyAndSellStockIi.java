/******************************* Java：买卖股票的最佳时机 II *******************************/
// 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
//
// 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。 
//
// 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 
//
// 
//
// 示例 1: 
//
// 输入: [7,1,5,3,6,4]
// 输出: 7
// 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
//      随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
// 
//
// 示例 2: 
//
// 输入: [1,2,3,4,5]
// 输出: 4
// 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
//      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
//      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
// 
//
// 示例 3: 
//
// 输入: [7,6,4,3,1]
// 输出: 0
// 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
//
// 
//
// 提示： 
//
// 
// 1 <= prices.length <= 3 * 10 ^ 4 
// 0 <= prices[i] <= 10 ^ 4 
// 
// Related Topics 贪心算法 数组 
// 👍 861 👎 0


/******************************* 题目思路 *******************************/
// 本题是一个十分巧秒的题，首先，我们利用数形结合来进行分析，可以绘制一个股票价格的折线图
// （图：略）通过图形，来分析一下在什么时候，能获取到最大的收益：
// 应该不难发现，就是在每一次谷底时候买入，一旦股票开始下跌立马抛出。再在谷底时买入，下跌时抛出.......
// 这样最大收益，也即折线图中所有上坡段的价格差的总和。
//
// 有了上面的分析思路，接下来就是如何具体实现：
//      方法一：先记录初值，作为谷底。开始遍历数组：
//              若出现下坡，继续遍历，直到开始上升，记录谷底；
//              若出现上坡，继续遍历，直到开始下降，记录谷峰；
//            每出现一对相邻的谷底谷峰，就将他们的差值叠加至总收益；
//      方法二：原理和上面相同，只是简化一下过程，直接将所有价格上涨的相邻两天的差值叠加至总收益（即：每两天分小段，叠加计算总收益）

/******************************* 题目代码 *******************************/
package leetcode.editor.cn;

class P122_BestTimeToBuyAndSellStockIi {
    public static void main(String[] args) {
        Solution solution = new P122_BestTimeToBuyAndSellStockIi().new Solution();
        // TO TEST
        int [] prices = {7,1,5,3,6,4};
        int ans = solution.maxProfit(prices);
        System.out.println(ans);
    }

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int maxProfit(int[] prices) {
        int maxprofit = 0;
        for(int i = 1; i < prices.length; i++){
            if(prices[i] - prices[i-1] > 0){
                maxprofit += prices[i] - prices[i-1];
            }
        }
        return maxprofit;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}

/******************************* 代码评价 *******************************/
// 时间复杂度 O(n)
// 空间复杂度 O(1)