/******************************* Java：删除排序数组中的重复项 *******************************/
// 给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
//
// 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。 
//
// 
//
// 示例 1: 
//
// 给定数组 nums = [1,1,2], 
//
// 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
//
// 你不需要考虑数组中超出新长度后面的元素。
//
// 示例 2: 
//
// 给定 nums = [0,0,1,1,1,2,2,3,3,4],
//
// 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
//
// 你不需要考虑数组中超出新长度后面的元素。
// 
//
// 
//
// 说明: 
//
// 为什么返回数值是整数，但输出的答案是数组呢? 
//
// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 
//
// 你可以想象内部操作如下: 
//
// // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
// int len = removeDuplicates(nums);
//
// // 在函数里修改输入数组对于调用者是可见的。
// // 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
// for (int i = 0; i < len; i++) {
//  print(nums[i]);
// }
// 
// Related Topics 数组 双指针 
// 👍 1644 👎 0


/******************************* 题目思路 *******************************/
// 数组里，个人感觉基本所有的题目都可以采用暴力解题法解决。
// 本题也可以直接双重循环遍历，既然有了思路，那就从这个角度出发。这个思路里，最关键的双重循环：1.遍历 2.遍历删除
// 首先，一重循环遍历肯定是不可少的，那就从删除角度优化：
//      如果数组已经排好序，那重复的元素就必然相邻，这会给我们的重复元素查找带来很大的便利（本题也给出了排序数组，如果未给出，那就先实现数组排序）；
//      观察这个数组：nums = [0,0,1,1,1,2,2,3,3,4]，找重复元素其实就是将每个元素和它前一个元素比较，相同就删除该元素（删除操作可移动元素进行覆盖完成）；
//      具体实现时，可以记录两个数组下标 i 和 j，其中 i 可视为删除重复元素之后数组最后一个元素位置，j 视为原数组遍历到的元素位置；
// 其实，这种思路在链表里经常使用，也就是所谓的 “双指针法”！

/******************************* 题目代码 *******************************/
package leetcode.editor.cn;


class P26_RemoveDuplicatesFromSortedArray {
    public static void main(String[] args) {
        Solution solution = new P26_RemoveDuplicatesFromSortedArray().new Solution();
        // TO TEST
        int []nums = {0,0,1,1,1,2,2,3,3,4};
        int answer = solution.removeDuplicates(nums);
        System.out.println(answer);
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public int removeDuplicates(int[] nums) {
            if(nums.length == 0) return 0;
            int i = 0;
            for(int j = 1; j < nums.length; j++){
                if(nums[i] != nums[j]){
                    i++;
                    nums[i] = nums[j];
                }
            }
            return i + 1;
        }
    }
    //leetcode submit region end(Prohibit modification and deletion)

}

/******************************* 代码评价 *******************************/
// 空间复杂度：O(1)
// 时间复杂度：O(n)